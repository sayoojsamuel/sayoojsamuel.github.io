{"meta":{"title":"OneDark","subtitle":"Tech! Cyber! OMG!","description":"v4d3r holds the blog","author":"Sayooj Samuel","url":"sayoojsamuel.github.io"},"pages":[{"title":"links","date":"2018-09-09T19:05:27.465Z","updated":"2018-09-09T19:05:27.461Z","comments":true,"path":"links/index.html","permalink":"sayoojsamuel.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Marty0ska1","slug":"marty0ska1","date":"2018-09-14T15:04:34.000Z","updated":"2018-09-16T13:27:53.353Z","comments":true,"path":"2018/09/14/marty0ska1/","link":"","permalink":"sayoojsamuel.github.io/2018/09/14/marty0ska1/","excerpt":"","text":"Writeup from SEC-T CTF’18 SEC-T CTF 2018: Marty0ska1Category: CryptoChallenge Points: 51Solves: 60+ Service: nc crypto.sect.ctf.rocks 2222 Really bad they took down the website and services soon after the CTF, I coudn’t complete my write up. So as you read, don’t expect the flag, though the method remains the same. nc crypto.sect.ctf.rocks 2222 As you are connected to the service, you are given three numbers: p, g, and g^x. They demand x. Discrete Logarithmic ProblemA stright DLP challenge. Things to notice, g=2, and p is factorizable. Tada!! it is Pohlig-Hellman. Use a sage script to solve the challenge.Let y=g^x R = IntegerModRing(p) x = discrete_log(R(y), R(g)) print x This will give the flag in less than two seconds. And that it.Submit x, to get the flag. Flag**SECT{Ru$$ian_D0LLZ_h0lDs_TH3_S3cR3T} Further ReadingTum CTF 2016 tacos","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"Crypto, DLP, Pohlig-Hellman Algorithm, CTF","slug":"Crypto-DLP-Pohlig-Hellman-Algorithm-CTF","permalink":"sayoojsamuel.github.io/tags/Crypto-DLP-Pohlig-Hellman-Algorithm-CTF/"}]},{"title":"Encoding","slug":"encoding","date":"2018-09-12T15:04:34.000Z","updated":"2018-09-14T18:52:25.968Z","comments":true,"path":"2018/09/12/encoding/","link":"","permalink":"sayoojsamuel.github.io/2018/09/12/encoding/","excerpt":"","text":"The basics of Encoding, a Beginner’s guide EncodingWhat is Encoding?If we start explain it to a 10 year old, the definition would go like, “Encoding is the process of changing data representation”.Rather, may be we should check this out : In computer technology, encoding is the process of applying a specific code, such as letters, symbols and numbers, to data for conversion into an equivalent cipher.The most common example would be changing “abc” to “ABC”, the lower-to-upper encoding. That was pretty basic! We also have a standard for converting characters.American Standard Code for Information Interchange (ASCII) was introduced just for that.Under ASCII, each character is given a unique decimal equivalent. That is, the character ‘A’ is given code 65, ‘B’ 66 and so on.You can see the complete reference by typing the following in your linux terminal. $ man ascii Now, if you have done that, it’s now clear that ASCII contains printable and nonprintable characters that represent uppercase and lowercase letters, symbols, punctuation marks and numbers.In man ascii, you must have noticed that there was a seperate tab called oct and hex. These are different number system, which we will be covering below.So a string, “Hello” can be converted to ASCII as “72 101 108 108 111”. This is how computers process information. Number System Binary Octal Decimal Hexadecimal Decimal is the number system used around the world. But if you peep into Mathematical Computing, we have many number systems.The most prevalent is Binary, which uses just 1’s and 0’s to represent data [Thus it is a base 2 number system]. Next we have Octal number system with base 8. Here, we use 8 digits to represent data, from 0,1,2 to 7. We also have hexadecimal, another commonly used system. Hexadecimal in fact means a base of 16. Since we only have 10 digits, we also use characters from A to F. So hex characters include 1,2,..,9,A,B,C,D,E and F, making a total of 16 digits. It is possible to convert data fromone system to another, but that is beyond the scope of this tutorial. Hex EncodingHex encoding is the process of changing data into hexadecimal representation. Having said that, Hexadecimal numerals are widely used by computer system designers and programmers, as they provide a more human-friendly representation of binary values. You can also try converting decimals and Strings to hex.Each hexadecimal character can be expanded into binary digits (A nibble). And it implies that a byte of data can be represented using two hex chars. Isn’t that cool? !!!NoteIn order to differentiate between the representations, we have different prefixes added to the data.\\x or 0x is the generally accepted prefix added to hexadecimal string.!!! A quick Example:0000 of binary will convert to ‘0’ of hex. Similarly, ‘f’ of hex will be 1111 of binary.Taking a byte at a time –&gt;0x00 is 0b00000000, 0x01 is 0b00000001, and so and so forth till 0x0f represents 0b00001111 (The Decimal equivalent is 15). When we move further, 0x10 is 0b00010000 (Decimal 16) till 0xff which is 0b11111111 (Decimal 255). The Encoding partRecollect that each character is assigned a decimal equivalent in ASCII [from 0 to 255].If we try to map it together, it turns out that each of the decimal equivalent can then be converted into hex.That’s it! The character ‘A‘ has decimal value of 65, which converts to 0x41 in hex. So next time we say 0x68656c6c6f, be sure to convert it into ASCII. If you are too lazy (its common among hackers,) it’s just “Hello” ! Base64 EncodingAs mentioned, Hex had only 16 characters. But this one is still awesome. Meet the Base64, with 64 characters. Base64 encoding takes three bytes, each consisting of 8 bits. The following is the character set for Base64 - 1. [a-z] - 26 characters 2. [A-Z] - 26 characters 3. [0-9] - 10 characters 4. [+] - 1 character 5. [/] - 1 character Now that if you count, it will add up to 64. It also have ‘=’ character, which is solely used for padding purposes.This character set includes uppercase and lowercase alphabets, digits, ‘+’ and ‘/‘. EncodingThe process is really simple. Write down the binary of the message, taking groups of 6 in one block. Now compare each block with the binary or decimal value with the corresponding character in the Base64 Chart. Join the characters, and that it. You’re done! PaddingAlways remember, your Base64 string length should be a multiple of 3. If not, you must add ‘=’ character at the end untill it’s a multiple. Padding is necessarity required for Base64 and it might save you from Padding errors.Pro Tip: And if you happen to see ‘=’ at the end of the string, don’t hesitate, try a Base64 decode! Hands-OnSo where do you start? We’ll share you an ‘WOW, THAT’s AWESOME!’ tip. Forget all that boring pen paper calculation you have to do! If you have a python shell, just simply type: print &quot;your-string-here&quot;.encode(&#39;hex&#39;) to print the Hex encoded string. To decode a hex string, just change it to print &quot;some-hex-string&quot;.decode(&#39;hex&#39;) Similarly, you can do Base64 encoding with .encode(&#39;base64&#39;) It’s also fine if you’re comfortable using online tools for these. At times, even they come handly!","categories":[{"name":"Article","slug":"Article","permalink":"sayoojsamuel.github.io/categories/Article/"}],"tags":[{"name":"Encoding, CTF, Hex, Base64, Python","slug":"Encoding-CTF-Hex-Base64-Python","permalink":"sayoojsamuel.github.io/tags/Encoding-CTF-Hex-Base64-Python/"}]},{"title":"Chop Suey","slug":"chopsuey","date":"2018-09-09T12:04:34.000Z","updated":"2018-09-14T18:19:31.714Z","comments":true,"path":"2018/09/09/chopsuey/","link":"","permalink":"sayoojsamuel.github.io/2018/09/09/chopsuey/","excerpt":"","text":"Writeup from noxCTF’18 noxCTF 2018: Chop-SueyCategory: CryptoChallenge Points: 118Solves: 235Description: Today I ate in a Chinese restaurant and got myself a fortune cookie. These things usually contain a note with a nice sentence or phrase, but mine had numbers in it instead! Can you help me find the meaning of the numbers? p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 So if you have learned Chinese Remainder Theorem, you would definitely have known this optimisation technique for RSA.It states:dp = d (mod p-1)dq = d (mod q-1)This technique is more faster than the Textbook RSA and with out p and q, you’d be having a really tough time. Just take a glimpse into what Wiki#Using_the_Chinese_remainder_algorithm) has to say.But for the funny part, they have already provided us with p and q values! We can easily recompute qinv, to get the flag. To construct qinv,qinv = modinv(q, p) m2 = pow(c, dq, q) m1 = pow(c, dp, p) h = (qinv * (m1 - m2)) % p m = m2 + h * q The complete script:from gmpy2 import * p=8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q=12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp=6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq=783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c=24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x - (b // a) * y, y) def modinv(a, m): g, x, y = egcd(a, m) if g != 1: raise Exception(&#39;modular inverse does not exist&#39;) else: return x % m qinv = modinv(q, p) m2 = pow(c, dq, q) m1 = pow(c, dp, p) h = (qinv * (m1 - m2)) % p m = m2 + h * q print(m) txt = hex(m)[2:] print &#39;&#39;.join([chr(int(&#39;&#39;.join(c), 16)) for c in zip(txt[0::2],txt[1::2])]) FlagnoxCTF{W31c0m3_70_Ch1n470wn}","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"Crypto, RSA","slug":"Crypto-RSA","permalink":"sayoojsamuel.github.io/tags/Crypto-RSA/"}]},{"title":"Principium","slug":"Principium","date":"2018-08-26T12:04:34.000Z","updated":"2018-08-26T12:07:36.779Z","comments":true,"path":"2018/08/26/Principium/","link":"","permalink":"sayoojsamuel.github.io/2018/08/26/Principium/","excerpt":"","text":"Welcome to my first Post! This is totally crazy&#39;&#39;&#39;bash sudo kill -me &#39;&#39;&#39; OK - See the wonders atSee more at: [Sayooj Samuel] (sayoojsamuel.github.io)","categories":[],"tags":[]}]}