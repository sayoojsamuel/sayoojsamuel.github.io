{"meta":{"title":"OneDark","subtitle":"Tech! Cyber! OMG!","description":"v4d3r holds the blog","author":"Sayooj Samuel","url":"sayoojsamuel.github.io"},"pages":[{"title":"about","date":"2018-09-30T13:58:45.000Z","updated":"2018-09-30T14:19:33.763Z","comments":true,"path":"about/index.html","permalink":"sayoojsamuel.github.io/about/index.html","excerpt":"","text":"About OneDarkOne Dark is my Personal Blog, a platform to showcase my interests and express my brain out.Myself Sayooj Samuel, a 2nd year Computer Science Undergraduate, at Amrita Unversity, Amritapuri. My brain is totally devoted to my wierd ideas. My Blog will be covering concepts and writeups about Cryptography challenges from CTF’s, that one being my favorite since the idea of Cyber Security crawled my thoughts."},{"title":"links","date":"2018-10-26T14:40:24.396Z","updated":"2018-10-26T14:40:24.392Z","comments":true,"path":"links/index.html","permalink":"sayoojsamuel.github.io/links/index.html","excerpt":"","text":"Test"}],"posts":[{"title":"tile-mate","slug":"tile-mate","date":"2018-10-26T14:49:34.000Z","updated":"2018-10-26T15:57:33.932Z","comments":true,"path":"2018/10/26/tile-mate/","link":"","permalink":"sayoojsamuel.github.io/2018/10/26/tile-mate/","excerpt":"","text":"Writeup from Bsides CTF’18 Bsides CTF 2018: Tile MateCategory: CryptoChallenge Points: 100Solves: 35Description: David and Toni rides scooter. Everyone knows except them! Attachments: tile_mate.tar.xz This is an easy XOR challenge, with a custom plaintext substitution before the actual XOR process.Again, the attachment contains two files encrypt.py ci.pher.text from itertools import cycle as scooter from secret import FLAG, KEY from hashlib import sha384 assert FLAG.islower() assert len(KEY) == 10 def drive(Helmet, Petrol): return &#39;&#39;.join(chr(ord(David)^ord(Toni)) for David,Toni in zip(Helmet,scooter(Petrol))) f = lambda x: sha384(x).digest()[(ord(x)+7)%48] encrypted = drive(map(f,FLAG),KEY.decode(&#39;hex&#39;)).encode(&#39;hex&#39;) open(&#39;ci.pher.text&#39;,&#39;wb&#39;).write(encrypted) Hmm, it is pretty obvious drive() is the Repeated Key XOR function, although the function looks cool! (Atleast the ‘Helmet,scooter(Petrol)’ part :p)..f being another function which returns the x+7th index character from the sha384 hash of x.The ciphertext is simply the XOR(f(pt),key). Solutionassert FLAG.islower() assert len(KEY) == 10 This suggests that the flag is composed of lowercase characters (digits and punctuation included) and the key length is 5 bytes (hex 10). Key RecoverySince the flag format is flag{, we can recover the key by XORing f(“flag{“) with ciphertext. hashed_flag = &#39;&#39;.join(map(f,&quot;flag{&quot;)) key = xor(hashed_flag,ct) hashed_pt = xor(ct,key) Now this hashed_pt is nothing but the hash of the flag. Getting to the Flagf = lambda x: sha384(x).digest()[(ord(x)+7)%48] This custom hash is not reversible, but we can still create a map with all possible characters, cause that’s just 90 possibilities ( Remember the lowercase?) chars = string.ascii_lowercase+string.digits+string.punctuation table = dict(zip(map(f,chars),chars)) flag=&quot;&quot; for i in hashed_pt: flag+=table[i] print flag The table contains the dict of hash, and character as key, value pair.For characters in hashed_pt, we find the preimage of the hash from the table. And you hold the flag for the challenge, TADA!!! Complete Scriptfrom hashlib import sha384 from itertools import cycle import string def xor(msg,key): return &#39;&#39;.join(chr(ord(i)^ord(j)) for i,j in zip(msg,cycle(key))) f = lambda x: sha384(x).digest()[(ord(x)+7)%48] ct = open(&#39;ci.pher.text&#39;,&#39;rb&#39;).read().decode(&#39;hex&#39;) hashed_flag = &#39;&#39;.join(map(f,&quot;flag{&quot;)) key = xor(hashed_flag,ct) hashed_pt = xor(ct,key) chars = string.ascii_lowercase+string.digits+string.punctuation table = dict(zip(map(f,chars),chars)) flag=&quot;&quot; for i in hashed_pt: flag+=table[i] print flag Flagflag{cr1b_dr4g_w1th_u1tr4_c00l_sc00ter!} Author’s NoteOkay, this is the second challenge I authored for BSides CTF’18 being organised at Delhi, the first one being pyQueue. 4 Line exploitJust a show-off, from hashlib import sha384;from itertools import cycle;import string xor,f,ct,chars=lambda (msg,key): &#39;&#39;.join(chr(ord(i)^ord(j)) for i,j in zip(msg,cycle(key))),lambda x: sha384(x).digest()[(ord(x)+7)%48],open(&#39;ci.pher.text&#39;,&#39;rb&#39;).read().decode(&#39;hex&#39;),string.ascii_lowercase+string.digits+string.punctuation hashed_pt,flag,table=xor((ct,xor((&#39;&#39;.join(map(f,&quot;flag{&quot;)),ct)))),&quot;&quot;,dict(zip(map(f,chars),chars)) for i in hashed_pt: flag+=table[i];print flag","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"XOR, Python, Custom, Hash, Delhi, , Bsides, CTF","slug":"XOR-Python-Custom-Hash-Delhi-Bsides-CTF","permalink":"sayoojsamuel.github.io/tags/XOR-Python-Custom-Hash-Delhi-Bsides-CTF/"}]},{"title":"pyQueue","slug":"pyQueue","date":"2018-10-26T11:49:34.000Z","updated":"2018-10-26T13:04:28.084Z","comments":true,"path":"2018/10/26/pyQueue/","link":"","permalink":"sayoojsamuel.github.io/2018/10/26/pyQueue/","excerpt":"","text":"Writeup from Bsides CTF’18 Bsides CTF 2018: pyQueueCategory: CryptoChallenge Points: 150Solves: 43Description: Easy Right? Attachments: pyQueue.tar.xz The attachment contains two files encrypt.py ci.pher.text Let’s analyse the encrypt.py key = AES_Key() ct=&quot;&quot; MAC = 0 for List in slice(FLAG): for block in List: cipher = AES.new(key.shuffle(), AES.MODE_ECB) ct+= cipher.encrypt(block) MAC ^= int(ct[-16:].encode(&#39;hex&#39;),16) MAC ^= int(key.shuffle().encode(&#39;hex&#39;),16) open(&quot;ci.pher.text&quot;,&#39;wb&#39;).write(str(MAC) +&quot;:&quot;+ ct.encode(&#39;hex&#39;)) Well, it’s an AES challenge on first sight. Three points to note, Each time an AES instance is created, a new key is being used as a resultant of key.shuffle() MAC is generated as the XOR of all the ct blocks. At the end, MAC is xored with key after being shuffled for one last time.MAC ^= int(key.shuffle().encode(&#39;hex&#39;),16) ci.pher.text is of the format MAC:CipherText A peek into the Key generation, class AES_Key: def __init__(self): self.key=list(os.urandom(16)) def enqueue(self): self.key+=get_random_bytes(1) def dequeue(self): self.key=self.key[1:] def size(self): return len(self.key) def shuffle(self): self.dequeue() self.enqueue() assert self.size()==AES.block_size return &quot;&quot;.join(self.key) This reveals that shuffle() method just removes the first byte of the 16 byte key and appends a random byte at the end. The complete setup was implemented as a Queue :P. This makes it a whole lot easier to bruteforce! SolutionKey RecoveryNow, to recover the key, we just have to XOR the MAC with all the ct blocks. The resultant is the key.shuffled() value. # Calculate key last_key = int(MAC) for i in ct: last_key ^= int(i.encode(&#39;hex&#39;), 16) last_key = long_to_bytes(last_key) BruteForceAll you need to do now is to bruteforce over 256 possible character. That is, remove the last byte of assumed key and add the bruteforce character at the beginning. The key pair for the plaintext where most of the starting characters are printable is what we are looking for. def brute(): key = last_key pt = &quot;&quot; for i in range(2,-1,-1): key = key[:-1] for ch in range(256): cipher = AES.new(chr(ch)+key,AES.MODE_ECB) recover = cipher.decrypt(ct[i]) if(all(c in printable for c in recover[:10])): pt = recover + pt key = chr(ch)+key break return pt Complete Scriptfrom Crypto.Cipher import AES from Crypto.Util.number import * from string import printable def split_by(msg,step): return [msg[i:i+step] for i in range(0,len(msg),16)] data = open(&quot;ci.pher.text&quot;,&#39;rb&#39;).read() MAC,ct = data.split(&quot;:&quot;) ct = split_by(ct.decode(&#39;hex&#39;),16) # Calculate key last_key = int(MAC) for i in ct: last_key ^= int(i.encode(&#39;hex&#39;), 16) last_key = long_to_bytes(last_key) # Brute Joy!!! key = last_key def brute(): key = last_key pt = &quot;&quot; for i in range(2,-1,-1): key = key[:-1] for ch in range(256): cipher = AES.new(chr(ch)+key,AES.MODE_ECB) recover = cipher.decrypt(ct[i]) if(all(c in printable for c in recover[:10])): pt = recover + pt key = chr(ch)+key break return pt print brute() Flagflag{H4il_bUggi3s!_qu3u3_k3y_2_h0t_4_w4rmUp} Author’s NoteI authored this challenge for Bsides CTF’18. I know that these kinda bruteforce challenges makes it hard for pro’s to play with, but will be pretty interesting for the beginners. I’m just saying :p","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"Bruteforce, Python, Queue, AES, ECB, Bsides, CTF","slug":"Bruteforce-Python-Queue-AES-ECB-Bsides-CTF","permalink":"sayoojsamuel.github.io/tags/Bruteforce-Python-Queue-AES-ECB-Bsides-CTF/"}]},{"title":"Big Boss Winner","slug":"bigboss","date":"2018-09-30T14:02:50.000Z","updated":"2018-10-26T12:46:28.028Z","comments":true,"path":"2018/09/30/bigboss/","link":"","permalink":"sayoojsamuel.github.io/2018/09/30/bigboss/","excerpt":"","text":"!!! note: This article is just for Live Analytics, So..Big Boss Malayalam Winner Leaked! Big Boss Malayalam Winner Season1Pearle Maaney Bags the TitleYeah, that shocking. But the Winner of BigBoss Season 1 Malayalam Edition is the most charming Pearle Maaney!! This result was declared based on the Users vote and other competition criterias. However, the winner will be declared only at the event finals to be held today. She will be awarded a price worth 1 Crore Rupees (US$140,000). This update is live and based on trusted sources. The Grand Finale will be a must watch show for all the followers of the most addictiveTelevision Show Premier. Follow for more updated on BigBoss Malayalam Spoilers. The FinalsThe Finals for the event will be aired at Asianet at 7 pm (August 30, 2018). This is the most awaited moment for the finalists as well as the audience. Pearle Maaney, Sabumon Abdusamad, Srinish Aravind, Aristo Suresh and Shiyas Kareem were the finalists as the show moved to a close. The finals is ment to be a grand suprise. As the Leak suggests, Aristo Suresh and Srinish Aravind will be evicted at the begining. However, the final duo will be Pearley and Sabumon, as Shiyas Kareem will be evicted right after Srinish. The glorious race to the Title will be taken by Pearley Maaney right after a thrilling Finale with Sabumon. Big Boss Location Revealed!Bigg Boss Malayalam 1 is the first season of Malayalam language version of the reality TV show Bigg Boss broadcast in India. The show premiered on June 24, 2018 on Asianet. Veteran actor Mohanlal is the host of the show. For the first season, a splendid home had set up in Lonavala. The First Episode started on June 24 2018. The audience vote is the only criteria for the eviction as suggested by sources. But recent doubts have erupted as the Vote statistics is not made public. Season 2The wait for the Season 2 is now up, as users already started a buzz on social media for the same.","categories":[{"name":"Entertainment","slug":"Entertainment","permalink":"sayoojsamuel.github.io/categories/Entertainment/"}],"tags":[{"name":"BigBoss, Big Boss, Grand Finale, Season 1, Leak, Spoiler,","slug":"BigBoss-Big-Boss-Grand-Finale-Season-1-Leak-Spoiler","permalink":"sayoojsamuel.github.io/tags/BigBoss-Big-Boss-Grand-Finale-Season-1-Leak-Spoiler/"}]},{"title":"flatcrypto","slug":"flatcrypto","date":"2018-09-16T18:04:34.000Z","updated":"2018-09-30T15:49:14.851Z","comments":true,"path":"2018/09/16/flatcrypto/","link":"","permalink":"sayoojsamuel.github.io/2018/09/16/flatcrypto/","excerpt":"","text":"Writeup from CSAW QUALS CTF’18 CSAW CTF QUALS 2018: FlatcryptoCategory: CryptoChallenge Points: 100Solves: 184Description: no logos or branding for this bug Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043 flag is not in flag format. flag is PROBLEM_KEY Attachments: serv-distribute.py import zlib import os from Crypto.Cipher import AES from Crypto.Util import Counter ENCRYPT_KEY = bytes.fromhex(&#39;0000000000000000000000000000000000000000000000000000000000000000&#39;) # Determine this key. # Character set: lowercase letters and underscore PROBLEM_KEY = &#39;not_the_flag&#39; def encrypt(data, ctr): return AES.new(ENCRYPT_KEY, AES.MODE_CTR, counter=ctr).encrypt(zlib.compress(data)) while True: f = input(&quot;Encrypting service\\n&quot;) if len(f) &lt; 20: continue enc = encrypt(bytes((PROBLEM_KEY + f).encode(&#39;utf-8&#39;)), Counter.new(64, prefix=os.urandom(8))) print(&quot;%s%s&quot; %(enc, chr(len(enc)))) Again, it’s another sipmple challenge based on AES_CTR. For all those noobies, note that AES Counter mode does not have Padding. And this challenge is specifically based on that. If we have a close look, it is the PROBLEM_KEY which we need to figure out. Now see that, enc = encrypt(bytes((PROBLEM_KEY + f).encode(&#39;utf-8&#39;)), |Counter.new(64, prefix=os.urandom(8))) is where we target out exploit. Our input f is appended to the PROBLEM_KEY, compressed and then encrypted without padding. This zlib compression is a huge vuln, and we forge a custom input such that the plaintext is compressed before encryption. Thus, it results in reduced length of the ciphertext. It is mentioned that the character set is lowercase ascii and underscore.I have created a bruteforce script, in which, the brute starts with character ‘a’ till ‘z’ multiplied 20 times.The length of the ciphertext decreases when the brute_char matches with the last byte of the PRODUCT_KEY. For the second last byte, we repeat the brute_char+lastbyte 20 times. Similarly the third last byte, which follows asbrute_char+secondlast+lastbyte 20 times. This will eventually give us the flag, which is not in the flag format. Complete Scriptfrom pwn import * context.log_level=&quot;error&quot; import string chars = string.ascii_lowercase + &quot;_&quot; flag = &quot;&quot; for j in range(30): print &quot;flag:&quot;,flag for i in chars: io = remote(&quot;crypto.chal.csaw.io&quot;,8040) print io.recv() io.sendline((i+flag)*20) print (i+flag) out = io.recvline() l = ord(out[-2]) print &quot;len=&quot;,l, i if l&lt;35: #&lt;== You have to edit this manually print i flag=i+flag break io.close() Flagcrime_doesnt_have_a_logo Plaid CTF CompressionA note to all the readers, that this challenge was the exact copy of the 2013 Plaid CTF challenge - Compression. Dosen’t know why they have to give the exact same question. Follow the writeup for the challenge for detailed explanation.","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"zlib, compression, CTF","slug":"zlib-compression-CTF","permalink":"sayoojsamuel.github.io/tags/zlib-compression-CTF/"}]},{"title":"babycrypto","slug":"babycrypto","date":"2018-09-16T17:04:34.000Z","updated":"2018-09-16T20:55:31.117Z","comments":true,"path":"2018/09/16/babycrypto/","link":"","permalink":"sayoojsamuel.github.io/2018/09/16/babycrypto/","excerpt":"","text":"Writeup from CSAW QUALS CTF’18 CSAW CTF QUALS 2018: BabycryptoCategory: CryptoChallenge Points: 50Solves: 295Description: yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet single yeet yeeted with single yeet == 0 yeeet what is yeet? yeet is yeet Attachments: ciphertext.txtPRO TIP:Tell you what, the smallest crypto will always be XOR in CSAW! And a XOR a == 0 ==&gt; |single yeet yeeted with single yeet == 0 And that’s the hint! to suggest it is a XOR challenge. So, we start with the attachment file, which includes a base64 encoded ciphertext.Perform a single byte xor, and you’ll find the flag in character 255. Leon is a programmer who aspires to create programs that help people do less. He wants to put automation first, and scalability alongside. He dreams of a world where the endless and the infinite become realities to mankind, and where the true value of life is preserved.flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH} Complete Scriptimport string def xor(a,b): return chr(ord(i)^ord(j) for i,j in zip(a,b)) ct = open(&#39;ciphertext.txt&#39;,&#39;rb&#39;).read().decode(&#39;base64&#39;) for i in range(256): pt = xor(ct,chr(i)*len(ct)) if all(c in string.printable for c in pt): print pt Flagflag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"Xor, yeet, , CTF","slug":"Xor-yeet-CTF","permalink":"sayoojsamuel.github.io/tags/Xor-yeet-CTF/"}]},{"title":"Marty0ska1","slug":"marty0ska1","date":"2018-09-14T15:04:34.000Z","updated":"2018-09-16T13:27:53.353Z","comments":true,"path":"2018/09/14/marty0ska1/","link":"","permalink":"sayoojsamuel.github.io/2018/09/14/marty0ska1/","excerpt":"","text":"Writeup from SEC-T CTF’18 SEC-T CTF 2018: Marty0ska1Category: CryptoChallenge Points: 51Solves: 60+ Service: nc crypto.sect.ctf.rocks 2222 Really bad they took down the website and services soon after the CTF, I coudn’t complete my write up. So as you read, don’t expect the flag, though the method remains the same. nc crypto.sect.ctf.rocks 2222 As you are connected to the service, you are given three numbers: p, g, and g^x. They demand x. Discrete Logarithmic ProblemA stright DLP challenge. Things to notice, g=2, and p is factorizable. Tada!! it is Pohlig-Hellman. Use a sage script to solve the challenge.Let y=g^x R = IntegerModRing(p) x = discrete_log(R(y), R(g)) print x This will give the flag in less than two seconds. And that it.Submit x, to get the flag. Flag**SECT{Ru$$ian_D0LLZ_h0lDs_TH3_S3cR3T} Further ReadingTum CTF 2016 tacos","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"Crypto, DLP, Pohlig-Hellman Algorithm, CTF","slug":"Crypto-DLP-Pohlig-Hellman-Algorithm-CTF","permalink":"sayoojsamuel.github.io/tags/Crypto-DLP-Pohlig-Hellman-Algorithm-CTF/"}]},{"title":"Encoding","slug":"encoding","date":"2018-09-12T15:04:34.000Z","updated":"2018-09-30T15:58:58.534Z","comments":true,"path":"2018/09/12/encoding/","link":"","permalink":"sayoojsamuel.github.io/2018/09/12/encoding/","excerpt":"","text":"The basics of Encoding, a Beginner’s guide EncodingWhat is Encoding?If we start explain it to a 10 year old, the definition would go like, “Encoding is the process of changing data representation”.Rather, may be we should check this out : In computer technology, encoding is the process of applying a specific code, such as letters, symbols and numbers, to data for conversion into an equivalent cipher.The most common example would be changing “abc” to “ABC”, the lower-to-upper encoding. That was pretty basic! We also have a standard for converting characters.American Standard Code for Information Interchange (ASCII) was introduced just for that.Under ASCII, each character is given a unique decimal equivalent. That is, the character ‘A’ is given code 65, ‘B’ 66 and so on.You can see the complete reference by typing the following in your linux terminal. $ man ascii Now, if you have done that, it’s now clear that ASCII contains printable and nonprintable characters that represent uppercase and lowercase letters, symbols, punctuation marks and numbers.In man ascii, you must have noticed that there was a seperate tab called oct and hex. These are different number system, which we will be covering below.So a string, “Hello” can be converted to ASCII as “72 101 108 108 111”. This is how computers process information. Number System Binary Octal Decimal Hexadecimal Decimal is the number system used around the world. But if you peep into Mathematical Computing, we have many number systems.The most prevalent is Binary, which uses just 1’s and 0’s to represent data [Thus it is a base 2 number system]. Next we have Octal number system with base 8. Here, we use 8 digits to represent data, from 0,1,2 to 7. We also have hexadecimal, another commonly used system. Hexadecimal in fact means a base of 16. Since we only have 10 digits, we also use characters from A to F. So hex characters include 1,2,..,9,A,B,C,D,E and F, making a total of 16 digits. It is possible to convert data fromone system to another, but that is beyond the scope of this tutorial. Hex EncodingHex encoding is the process of changing data into hexadecimal representation. Having said that, Hexadecimal numerals are widely used by computer system designers and programmers, as they provide a more human-friendly representation of binary values. You can also try converting decimals and Strings to hex.Each hexadecimal character can be expanded into binary digits (A nibble). And it implies that a byte of data can be represented using two hex chars. Isn’t that cool? !!!NoteIn order to differentiate between the representations, we have different prefixes added to the data.\\x or 0x is the generally accepted prefix added to hexadecimal string.!!! A quick Example:0000 of binary will convert to ‘0’ of hex. Similarly, ‘f’ of hex will be 1111 of binary.Taking a byte at a time –&gt;0x00 is 0b00000000, 0x01 is 0b00000001, and so and so forth till 0x0f represents 0b00001111 (The Decimal equivalent is 15). When we move further, 0x10 is 0b00010000 (Decimal 16) till 0xff which is 0b11111111 (Decimal 255). The Encoding partRecollect that each character is assigned a decimal equivalent in ASCII [from 0 to 255].If we try to map it together, it turns out that each of the decimal equivalent can then be converted into hex.That’s it! The character ‘A‘ has decimal value of 65, which converts to 0x41 in hex. So next time we say 0x68656c6c6f, be sure to convert it into ASCII. If you are too lazy (its common among hackers,) it’s just “Hello” ! Base64 EncodingAs mentioned, Hex had only 16 characters. But this one is still awesome. Meet the Base64, with 64 characters. Base64 encoding takes three bytes, each consisting of 8 bits. The following is the character set for Base64 - 1. [a-z] - 26 characters 2. [A-Z] - 26 characters 3. [0-9] - 10 characters 4. [+] - 1 character 5. [/] - 1 character Now that if you count, it will add up to 64. It also have ‘=’ character, which is solely used for padding purposes.This character set includes uppercase and lowercase alphabets, digits, ‘+’ and ‘/‘. EncodingThe process is really simple. Write down the binary of the message, taking groups of 6 in one block. Now compare each block with the binary or decimal value with the corresponding character in the Base64 Chart. Join the characters, and that it. You’re done! PaddingAlways remember, your Base64 string length should be a multiple of 3. If not, you must add ‘=’ character at the end untill it’s a multiple. Padding is necessarity required for Base64 and it might save you from Padding errors.Pro Tip: And if you happen to see ‘=’ at the end of the string, don’t hesitate, try a Base64 decode! Hands-OnSo where do you start? We’ll share you an ‘WOW, THAT’s AWESOME!’ tip. Forget all that boring pen paper calculation you have to do! If you have a python shell, just simply type: print &quot;your-string-here&quot;.encode(&#39;hex&#39;) to print the Hex encoded string. To decode a hex string, just change it to print &quot;some-hex-string&quot;.decode(&#39;hex&#39;) Similarly, you can do Base64 encoding with .encode(&#39;base64&#39;) It’s also fine if you’re comfortable using online tools for these. At times, even they come handly!","categories":[{"name":"Article","slug":"Article","permalink":"sayoojsamuel.github.io/categories/Article/"}],"tags":[{"name":"Encoding, CTF, Hex, Base64, Python","slug":"Encoding-CTF-Hex-Base64-Python","permalink":"sayoojsamuel.github.io/tags/Encoding-CTF-Hex-Base64-Python/"}]},{"title":"Chop Suey","slug":"chopsuey","date":"2018-09-09T12:04:34.000Z","updated":"2018-09-14T18:19:31.714Z","comments":true,"path":"2018/09/09/chopsuey/","link":"","permalink":"sayoojsamuel.github.io/2018/09/09/chopsuey/","excerpt":"","text":"Writeup from noxCTF’18 noxCTF 2018: Chop-SueyCategory: CryptoChallenge Points: 118Solves: 235Description: Today I ate in a Chinese restaurant and got myself a fortune cookie. These things usually contain a note with a nice sentence or phrase, but mine had numbers in it instead! Can you help me find the meaning of the numbers? p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 So if you have learned Chinese Remainder Theorem, you would definitely have known this optimisation technique for RSA.It states:dp = d (mod p-1)dq = d (mod q-1)This technique is more faster than the Textbook RSA and with out p and q, you’d be having a really tough time. Just take a glimpse into what Wiki#Using_the_Chinese_remainder_algorithm) has to say.But for the funny part, they have already provided us with p and q values! We can easily recompute qinv, to get the flag. To construct qinv,qinv = modinv(q, p) m2 = pow(c, dq, q) m1 = pow(c, dp, p) h = (qinv * (m1 - m2)) % p m = m2 + h * q The complete script:from gmpy2 import * p=8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q=12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp=6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq=783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c=24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x - (b // a) * y, y) def modinv(a, m): g, x, y = egcd(a, m) if g != 1: raise Exception(&#39;modular inverse does not exist&#39;) else: return x % m qinv = modinv(q, p) m2 = pow(c, dq, q) m1 = pow(c, dp, p) h = (qinv * (m1 - m2)) % p m = m2 + h * q print(m) txt = hex(m)[2:] print &#39;&#39;.join([chr(int(&#39;&#39;.join(c), 16)) for c in zip(txt[0::2],txt[1::2])]) FlagnoxCTF{W31c0m3_70_Ch1n470wn}","categories":[{"name":"Writeups","slug":"Writeups","permalink":"sayoojsamuel.github.io/categories/Writeups/"}],"tags":[{"name":"Crypto, RSA","slug":"Crypto-RSA","permalink":"sayoojsamuel.github.io/tags/Crypto-RSA/"}]},{"title":"Principium","slug":"Principium","date":"2018-08-26T12:04:34.000Z","updated":"2018-08-26T12:07:36.779Z","comments":true,"path":"2018/08/26/Principium/","link":"","permalink":"sayoojsamuel.github.io/2018/08/26/Principium/","excerpt":"","text":"Welcome to my first Post! This is totally crazy&#39;&#39;&#39;bash sudo kill -me &#39;&#39;&#39; OK - See the wonders atSee more at: [Sayooj Samuel] (sayoojsamuel.github.io)","categories":[],"tags":[]}]}